using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Linq.Expressions;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Linq;
using Swashbuckle.Swagger;

namespace EmployeeDetails.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeesController : ControllerBase
    {
        private static List<Employees> employees = new List<Employees>()
        { 
                new Employees()
                {
                    Name = "Aakash",
                    Dob = Convert.ToDateTime("1998-04-011"),
                    Address1 = "chennai",
                    Address2 = "triplicane",
                    Salary = 5000
                },
                new Employees()
                {
                    Name = "Vicky",
                    Dob = Convert.ToDateTime("1997-06-11"),
                    Address1 = "salem",
                    Address2 = "bypass",
                    Salary = 6000
                }
        };
        [HttpGet]
        [Route("GetEmployees")]

        public async Task<ActionResult<Employees>> GetEmployees()
        {
            return Ok(employees);
        }

        [HttpGet]
        [Route("GetEmployee")]

        public async Task<IActionResult> GetEmployee()
        {
            try
            {
                List<Employees> lstemp = new List<Employees>();
                XmlTextReader xmlTextReader = new XmlTextReader(@"C:\Users\Admin\Desktop\\emp.xml");
                XmlDocument xDoc = new XmlDocument();
                string s1 = "";
                xDoc.Load(@"C:\Users\Admin\Desktop\\emp.xml");
                XmlElement root = xDoc.DocumentElement;
                XmlNodeList elemList = root.GetElementsByTagName("Employee");
                for (int i = 0; i < elemList.Count; i++)
                {
                    Employees emp = new Employees();
                    xmlTextReader.ReadToFollowing("Name");
                    s1 = xmlTextReader.ReadElementContentAsString();
                    emp.Name = s1;
                    s1 = "";
                    xmlTextReader.ReadToFollowing("Dob");
                    s1 = xmlTextReader.ReadElementContentAsString();
                    emp.Dob = Convert.ToDateTime(s1);
                    s1 = "";
                    xmlTextReader.ReadToFollowing("Address1");
                    s1 = xmlTextReader.ReadElementContentAsString();
                    emp.Address1 = s1;
                    s1 = "";
                    xmlTextReader.ReadToFollowing("Address2");
                    s1 = xmlTextReader.ReadElementContentAsString();
                    emp.Address2 = s1;
                    s1 = "";
                    xmlTextReader.ReadToFollowing("Salary");
                    s1 = xmlTextReader.ReadElementContentAsString();
                    emp.Salary = Convert.ToDecimal(s1);
                    s1 = "";

                    var res =DateTime.Now.Year - emp.Dob.Year;
                    lstemp.Add(emp);
                }
                return Ok(lstemp);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        [Route("AddEmployee")]

        public async Task<ActionResult<Employees>> AddEmployee(Employees request)
        {
            employees.Add(request);
            return Ok(employees);
        }

        [HttpPut]
        [Route("UpdateEmployee")]

        public async Task<ActionResult<Employees>> UpdateEmployee(Employees request)
        {
            var Employees = employees.Find(x => x.Name == request.Name);
            if (Employees == null)
                return BadRequest("No Employees Found");
            Employees.Name = request.Name;
            Employees.Dob = request.Dob;
            Employees.Address1 = request.Address1;
            Employees.Address2 = request.Address2;
            Employees.Salary = request.Salary;
            return Ok(Employees);

        }

        [HttpDelete]
        [Route("DeleteEmployee")]

        public async Task<ActionResult<Employees>> DeleteEmployee(string name)
        {
            var Employees = employees.Find(x => x.Name == name);
            if (employees == null)
                return BadRequest("No Employees Found");
            employees.Remove(Employees);
            return Ok(Employees);
            _ = DateTime.Now.Year;
        }

    }
}
